/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,6],$V2=[1,49],$V3=[1,51],$V4=[1,46],$V5=[1,48],$V6=[1,27],$V7=[1,21],$V8=[1,9],$V9=[1,10],$Va=[1,11],$Vb=[1,24],$Vc=[1,14],$Vd=[1,15],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,22],$Vi=[1,23],$Vj=[1,25],$Vk=[1,26],$Vl=[1,50],$Vm=[1,43],$Vn=[1,41],$Vo=[1,42],$Vp=[1,47],$Vq=[5,9,10,11,20,21,24,28,29,33,34,36,40,41,43,44,45,46,47,51,52,56,89,94,95,100],$Vr=[2,19],$Vs=[5,9,10,11,20,21,24,25,28,29,33,34,36,40,41,43,44,45,46,47,51,52,56,60,62,89,94,95,100],$Vt=[2,27],$Vu=[1,62],$Vv=[5,9,10,11,20,21,24,25,28,29,32,33,34,36,40,41,43,44,45,46,47,51,52,56,60,62,89,94,95,100],$Vw=[1,66],$Vx=[13,17,28,57],$Vy=[13,17,18,28,57,58],$Vz=[13,17,18,28,57,58,65,66],$VA=[1,76],$VB=[13,17,18,28,57,58,65,66,68],$VC=[1,77],$VD=[13,17,18,28,57,58,65,66,68,70],$VE=[1,78],$VF=[13,17,18,28,57,58,65,66,68,70,72],$VG=[1,79],$VH=[13,17,18,28,57,58,65,66,68,70,72,74],$VI=[1,80],$VJ=[1,81],$VK=[13,17,18,28,57,58,65,66,68,70,72,74,76,78],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[13,17,18,28,57,58,65,66,68,70,72,74,76,78,79,81,82,83],$VQ=[1,86],$VR=[1,87],$VS=[13,17,18,28,57,58,65,66,68,70,72,74,76,78,79,81,82,83,84,86],$VT=[1,88],$VU=[1,89],$VV=[13,17,18,28,57,58,65,66,68,70,72,74,76,78,79,81,82,83,84,86,87,89],$VW=[1,90],$VX=[1,91],$VY=[1,92],$VZ=[13,17,18,28,57,58,65,66,68,70,72,74,76,78,79,81,82,83,84,86,87,89,90,92,93],$V_=[1,93],$V$=[1,94],$V01=[13,17,18,28,57,58,65,66,68,70,72,74,76,78,79,81,82,83,84,86,87,89,90,92,93,96,97],$V11=[13,17,18,28,56,57,58,65,66,68,70,72,74,76,78,79,81,82,83,84,86,87,89,90,92,93,96,97,99],$V21=[2,61],$V31=[13,28],$V41=[2,51],$V51=[1,112],$V61=[13,17,28,58],$V71=[1,150],$V81=[13,17,28],$V91=[1,159],$Va1=[1,160],$Vb1=[1,161],$Vc1=[1,162],$Vd1=[2,17],$Ve1=[1,173],$Vf1=[1,177],$Vg1=[1,178],$Vh1=[1,179],$Vi1=[13,17,24,28,56,58],$Vj1=[2,66],$Vk1=[1,209],$Vl1=[1,210];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"decls":4,"EOF":5,"decl":6,"func_decl":7,"stm_list":8,"FUNCTION":9,"NAME":10,"L_PAR":11,"params":12,"R_PAR":13,"return_type":14,"block_decl":15,"param":16,"COMMA":17,"COLON":18,"type":19,"NUMBER":20,"STRING":21,"BOOLEAN":22,"VOID":23,"L_CURLY":24,"R_CURLY":25,"stm":26,"var_decl":27,"SEMICOLON":28,"IF":29,"expr":30,"then_stm":31,"ELSE":32,"WHILE":33,"FOR":34,"arg":35,"VAR":36,"OF":37,"IN":38,"normal_stm":39,"DO":40,"SWITCH":41,"case_stm":42,"BREAK":43,"CONTINUE":44,"return":45,"CONSOLE_LOG":46,"GRAFICAR_TS":47,"scope":48,"var_element":49,"var_list":50,"LET":51,"CONST":52,"dec_type":53,"dec_assign":54,"array":55,"L_SQUARE":56,"R_SQUARE":57,"ASSIGN":58,"op_if":59,"CASE":60,"value":61,"DEFAULT":62,"op_assign":63,"op_or":64,"QUESTION":65,"OR":66,"op_and":67,"AND":68,"op_bin_or":69,"BIN_OR":70,"op_bin_xor":71,"BIN_XOR":72,"op_bin_and":73,"BIN_AND":74,"op_equate":75,"EQUAL":76,"op_compare":77,"NOT_EQUAL":78,"LESS":79,"op_shift":80,"GREATER":81,"LESS_EQUAL":82,"GREATER_EQUAL":83,"L_SHIFT":84,"op_add":85,"R_SHIFT":86,"PLUS":87,"op_mult":88,"MINUS":89,"MULTIPLY":90,"op_unary":91,"DIVIDE":92,"REMAINDER":93,"NOT":94,"BIN_NOT":95,"INCREMENT":96,"DECREMENT":97,"op_pointer":98,"DOT":99,"DECIMAL":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"FUNCTION",10:"NAME",11:"L_PAR",13:"R_PAR",16:"param",17:"COMMA",18:"COLON",20:"NUMBER",21:"STRING",22:"BOOLEAN",23:"VOID",24:"L_CURLY",25:"R_CURLY",28:"SEMICOLON",29:"IF",32:"ELSE",33:"WHILE",34:"FOR",36:"VAR",37:"OF",38:"IN",40:"DO",41:"SWITCH",43:"BREAK",44:"CONTINUE",45:"return",46:"CONSOLE_LOG",47:"GRAFICAR_TS",51:"LET",52:"CONST",56:"L_SQUARE",57:"R_SQUARE",58:"ASSIGN",60:"CASE",62:"DEFAULT",65:"QUESTION",66:"OR",68:"AND",70:"BIN_OR",72:"BIN_XOR",74:"BIN_AND",76:"EQUAL",78:"NOT_EQUAL",79:"LESS",81:"GREATER",82:"LESS_EQUAL",83:"GREATER_EQUAL",84:"L_SHIFT",86:"R_SHIFT",87:"PLUS",89:"MINUS",90:"MULTIPLY",92:"DIVIDE",93:"REMAINDER",94:"NOT",95:"BIN_NOT",96:"INCREMENT",97:"DECREMENT",99:"DOT",100:"DECIMAL"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[7,7],[7,6],[7,6],[7,5],[12,3],[12,1],[14,2],[19,1],[19,1],[19,1],[19,1],[15,3],[8,2],[8,0],[26,2],[26,5],[26,7],[26,5],[26,9],[26,8],[26,8],[26,1],[31,7],[31,5],[31,9],[31,8],[31,8],[31,1],[39,7],[39,7],[39,1],[39,2],[39,2],[39,2],[39,3],[39,1],[39,1],[39,5],[39,4],[27,3],[48,1],[48,1],[48,1],[49,3],[50,3],[50,0],[53,3],[53,0],[55,3],[55,2],[55,0],[54,2],[54,0],[35,1],[35,1],[35,0],[42,7],[42,5],[42,5],[42,3],[42,0],[30,3],[30,1],[63,3],[63,1],[59,5],[59,1],[64,3],[64,1],[67,3],[67,1],[69,3],[69,1],[71,3],[71,1],[73,3],[73,1],[75,3],[75,3],[75,1],[77,3],[77,3],[77,3],[77,3],[77,1],[80,3],[80,3],[80,1],[85,3],[85,3],[85,1],[88,3],[88,3],[88,3],[88,1],[91,2],[91,2],[91,2],[91,2],[91,2],[91,1],[98,3],[98,4],[98,1],[61,1],[61,1],[61,1],[61,1],[61,4],[61,3],[61,3],[61,2],[61,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:

		let decls = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => decls.push(element));
		}
		this.$ = decls;
	
break;
case 3: case 19: case 51: case 53: case 56: case 58: case 66:

		this.$ = null;
	
break;
case 4: case 5: case 11: case 12: case 13: case 14: case 15: case 16: case 27: case 33: case 36: case 42: case 46: case 47: case 48: case 57: case 59: case 60: case 70: case 72: case 74: case 76: case 78: case 80: case 82: case 85: case 90: case 93: case 96: case 100: case 106: case 109:

		this.$ = $$[$0];
	
break;
case 6:

		this.$ =  create_function($$[$0-1], $$[$0-5], $$[$0-3], $$[$0]);
	
break;
case 7:

		this.$ = create_function(null, $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 8:

		this.$ = create_function($$[$0-1], $$[$0-4], null, $$[$0]);
	
break;
case 9:

		this.$ = create_function(null, $$[$0-3], null, $$[$0]);
	
break;
case 10:

		let params = [$$[$0-2]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => params.push(element));
		}
		this.$ = params;
	
break;
case 17: case 20: case 54: case 118:

		this.$ = $$[$0-1];
	
break;
case 18:

		let stmList = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => stmList.push(element));
		}
		this.$ = stmList;
	
break;
case 21:

		this.$ =  create_if($$[$0-2], $$[$0]);
	
break;
case 22: case 28:

		this.$ = create_ifelse($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 23: case 29:

		this.$ = create_while($$[$0-2], $$[$0]);
	
break;
case 24: case 30:

		this.$ = create_for($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 25: case 31:

		this.$ =  create_forof($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 26: case 32:

		this.$ =  create_forin($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 34:

		this.$ = create_dowhile($$[$0-2], $$[$0-5]);
	
break;
case 35:

		this.$ = create_switch($$[$0-4], $$[$0-1]);
	
break;
case 37: case 41:

		// does nothing
	
break;
case 38:

		this.$ = create_break();
	
break;
case 39:

		this.$ =  create_continue();
	
break;
case 40:

		this.$ = create_return($$[$0-1]);
	
break;
case 43:

		this.$ = create_consolelog($$[$0-2]);
	
break;
case 44:

		this.$ = create_graficarTS();
	
break;
case 45:

		let varList = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => varList.push(element));
		}
		this.$ = create_declaration($$[$0-2], varList);
	
break;
case 49:

		let element = {
			model: 'VarElement',
			id: $$[$0-2],
			type: $$[$0-1] == null? null : $$[$0-1].type,
			array: $$[$0-1] == null? null : $$[$0-1].array,
			value: $$[$0]
		};
		this.$ = element;
	
break;
case 50:

		let a = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => a.push(element));
			this.$ = a;
		}
		else
		{
			this.$ = a;
		}
	
break;
case 52:

		let t = {
			type: $$[$0-1],
			array: $$[$0]
		};
		this.$ = t;
	
break;
case 55:

		this.$ = '[]';
	
break;
case 62:

		let c1 = create_case($$[$0-5], $$[$0-2]);
		let cases1 = [c1];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => {
				cases1.push(element);
			});
		}
		this.$ = cases1;
	
break;
case 63:

		let c2 = create_case($$[$0-3], $$[$0-1]);
		let cases2 = [c2];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => {
				cases2.push(element);
			});
		}
		this.$ = cases2;
	
break;
case 64:

		this.$ = [create_case('default', $$[$0-1])];
	
break;
case 65:

		this.$ = [create_case('default', $$[$0])];
	
break;
case 67:

		if($$[$0-2].model == 'Expression')
		{
			//create array with [expr, op_assign]
			let e = create_expression_element($$[$0]);
			let arr = [$$[$0-2], e];
			this.$ = arr;
		}
		else
		{
			// add a new expression element to the list
			this.$.push(create_expression_element($$[$0]));
		}
	
break;
case 68:

		this.$ = create_expression_element($$[$0]);
	
break;
case 69:

		this.$ = create_assignoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 71:

		this.$ = create_ternaryoperation($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 73: case 75:

		this.$ = create_logicaloperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 77: case 79: case 81:

		this.$ = create_bitwiseoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 83: case 84: case 86: case 87: case 88: case 89:

		this.$ = create_relationaloperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 91: case 92:

		this.$ = create_shiftoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 94: case 95: case 97: case 99:

		this.$ = create_arithmeticoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 98:

		$ = create_arithmeticoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 101: case 102: case 105:

		this.$ = create_unaryoperation($$[$0], $$[$0-1]);
	
break;
case 103:

		// RANDOM COMMENT
		this.$ = create_unaryoperation($$[$0-1], '++');
	
break;
case 104:

		this.$ = create_unaryoperation($$[$0-1], '--');
	
break;
case 107:

		//attribute access
	
break;
case 108:

		//array access
	
break;
case 110: case 111:

		this.$ = create_number($$[$0]);
	
break;
case 112:

		var s = $$[$0].replace(/\"/g, "");
		var s2 = s.replace(/\'/g, "");
		this.$ = create_string(s2);
	
break;
case 113:

		if($$[$0] == 'true' || $$[$0] == 'false')
		{
			this.$ = create_boolean($$[$0]);
		}
		else
		{
			this.$ = create_variable($$[$0]);
		}
	
break;
case 114:

		//function call
		this.$ = create_call($$[$0-3], $$[$0-1]);
	
break;
case 115:

		//function call
		this.$ = create_call($$[$0-2], null);
	
break;
case 116:

		//array assignment [elements]
	
break;
case 117:

		//array assignment []
	
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:7,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{1:[3]},{5:[1,52]},{4:53,5:$V0,6:3,7:4,8:5,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:7,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($Vq,[2,4]),o($Vq,[2,5]),{10:[1,54]},o([5,25,60,62],$Vr,{26:7,27:8,39:12,48:13,15:16,30:17,63:28,59:29,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,91:40,98:44,61:45,8:55,7:56,9:$V1,10:$V2,11:$V3,20:$V4,21:$V5,24:$V6,28:$V7,29:$V8,33:$V9,34:$Va,36:$Vb,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,51:$Vj,52:$Vk,56:$Vl,89:$Vm,94:$Vn,95:$Vo,100:$Vp}),{28:[1,57]},{11:[1,58]},{11:[1,59]},{11:[1,60]},o($Vs,$Vt),{10:$Vu,49:61},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:63,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{11:[1,64]},o($Vv,[2,36]),{17:$Vw,28:[1,65]},{28:[1,67]},{28:[1,68]},{10:$V2,11:$V3,20:$V4,21:$V5,30:69,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($Vv,[2,41]),{11:[1,70]},{11:[1,71]},{10:[2,46]},{10:[2,47]},{10:[2,48]},{7:56,8:72,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,25:$Vr,26:7,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($Vx,[2,68]),o($Vx,[2,70],{58:[1,73]}),o($Vy,[2,72],{65:[1,74],66:[1,75]}),o($Vz,[2,74],{68:$VA}),o($VB,[2,76],{70:$VC}),o($VD,[2,78],{72:$VE}),o($VF,[2,80],{74:$VG}),o($VH,[2,82],{76:$VI,78:$VJ}),o($VK,[2,85],{79:$VL,81:$VM,82:$VN,83:$VO}),o($VP,[2,90],{84:$VQ,86:$VR}),o($VS,[2,93],{87:$VT,89:$VU}),o($VV,[2,96],{90:$VW,92:$VX,93:$VY}),o($VZ,[2,100],{96:$V_,97:$V$}),{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,89:$Vm,91:95,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,89:$Vm,91:96,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,89:$Vm,91:97,94:$Vn,95:$Vo,98:44,100:$Vp},o($V01,[2,106],{56:[1,99],99:[1,98]}),o($V11,[2,109]),o($V11,[2,110]),o($V11,[2,111]),o($V11,[2,112]),o($V11,[2,113],{11:[1,100]}),{10:$V2,11:$V3,20:$V4,21:$V5,30:101,56:$Vl,57:[1,102],59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,30:103,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{1:[2,1]},{5:[2,2]},{11:[1,104]},o($Vs,[2,18]),o($Vv,[2,42]),o($Vs,[2,20]),{10:$V2,11:$V3,20:$V4,21:$V5,30:105,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,30:106,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,27:110,28:$V21,30:109,35:107,36:[1,108],48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($V31,$V41,{50:111,17:$V51}),o($V61,[2,53],{53:113,18:[1,114]}),{33:[1,115]},{10:$V2,11:$V3,20:$V4,21:$V5,30:116,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($Vv,[2,37]),{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,59:29,61:45,63:117,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($Vv,[2,38]),o($Vv,[2,39]),{17:$Vw,28:[1,118]},{10:$V2,11:$V3,20:$V4,21:$V5,30:119,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{13:[1,120]},{25:[1,121]},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,59:29,61:45,63:122,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,59:123,61:45,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,67:124,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,69:125,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,71:126,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,73:127,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,75:128,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,77:129,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,77:130,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,80:131,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,80:132,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,80:133,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,80:134,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,85:135,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,85:136,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,88:137,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,88:138,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,89:$Vm,91:139,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,89:$Vm,91:140,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:45,89:$Vm,91:141,94:$Vn,95:$Vo,98:44,100:$Vp},o($V01,[2,103]),o($V01,[2,104]),o($VZ,[2,101],{96:$V_,97:$V$}),o($VZ,[2,102],{96:$V_,97:$V$}),o($VZ,[2,105],{96:$V_,97:$V$}),{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:142,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,30:143,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,13:[1,145],20:$V4,21:$V5,30:144,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{17:$Vw,57:[1,146]},o($V11,[2,117]),{13:[1,147],17:$Vw},{12:148,13:[1,149],16:$V71},{13:[1,151],17:$Vw},{13:[1,152],17:$Vw},{28:[1,153]},{10:[1,154]},o($V31,[2,59],{17:$Vw}),o($V31,[2,60]),o($V31,[2,45]),{10:$Vu,49:155},o($V81,[2,58],{54:156,58:[1,157]}),{19:158,20:$V91,21:$Va1,22:$Vb1,23:$Vc1},{11:[1,163]},{13:[1,164],17:$Vw},o($Vx,[2,67]),o($Vv,[2,40]),{13:[1,165],17:$Vw},{28:[1,166]},o($Vv,$Vd1),o($Vx,[2,69]),{18:[1,167]},o($Vz,[2,73],{68:$VA}),o($VB,[2,75],{70:$VC}),o($VD,[2,77],{72:$VE}),o($VF,[2,79],{74:$VG}),o($VH,[2,81],{76:$VI,78:$VJ}),o($VK,[2,83],{79:$VL,81:$VM,82:$VN,83:$VO}),o($VK,[2,84],{79:$VL,81:$VM,82:$VN,83:$VO}),o($VP,[2,86],{84:$VQ,86:$VR}),o($VP,[2,87],{84:$VQ,86:$VR}),o($VP,[2,88],{84:$VQ,86:$VR}),o($VP,[2,89],{84:$VQ,86:$VR}),o($VS,[2,91],{87:$VT,89:$VU}),o($VS,[2,92],{87:$VT,89:$VU}),o($VV,[2,94],{90:$VW,92:$VX,93:$VY}),o($VV,[2,95],{90:$VW,92:$VX,93:$VY}),o($VZ,[2,97],{96:$V_,97:$V$}),o($VZ,[2,98],{96:$V_,97:$V$}),o($VZ,[2,99],{96:$V_,97:$V$}),o($V11,[2,107]),{17:$Vw,57:[1,168]},{13:[1,169],17:$Vw},o($V11,[2,115]),o($V11,[2,116]),o($V11,[2,118]),{13:[1,170]},{14:171,15:172,18:$Ve1,24:$V6},{13:[2,11],17:[1,174]},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:175,27:8,28:$V7,29:$Vf1,30:17,31:176,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:181,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,27:110,28:$V21,30:109,35:182,36:$Vb,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{37:[1,183],38:[1,184]},o($V31,$V41,{50:185,17:$V51}),o($V81,[2,49]),{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,59:186,61:45,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($V61,[2,56],{55:187,56:[1,188]}),o($Vi1,[2,13]),o($Vi1,[2,14]),o($Vi1,[2,15]),o($Vi1,[2,16]),{10:$V2,11:$V3,20:$V4,21:$V5,30:189,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{24:[1,190]},{28:[1,191]},o($Vv,[2,44]),{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,59:192,61:45,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($V11,[2,108]),o($V11,[2,114]),{14:193,15:194,18:$Ve1,24:$V6},{15:195,24:$V6},o($Vv,[2,9]),{19:196,20:$V91,21:$Va1,22:$Vb1,23:$Vc1},{12:197,16:$V71},o($Vs,[2,21]),{32:[1,198]},{11:[1,199]},{11:[1,200]},{11:[1,201]},o($Vv,$Vt),o($Vs,[2,23]),{28:[1,202]},{10:[1,203]},{10:[1,204]},o($V31,[2,50]),o($V81,[2,57]),o($V61,[2,52]),{10:$V2,11:$V3,20:$V4,21:$V5,30:205,56:$Vl,57:[1,206],59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{13:[1,207],17:$Vw},{25:$Vj1,42:208,60:$Vk1,62:$Vl1},o($Vv,[2,43]),o($Vy,[2,71]),{15:211,24:$V6},o($Vv,[2,7]),o($Vv,[2,8]),{24:[2,12]},{13:[2,10]},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:212,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,30:213,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,30:214,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,27:110,28:$V21,30:109,35:215,36:[1,216],48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,13:$V21,20:$V4,21:$V5,27:110,30:109,35:217,36:$Vb,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{13:[1,218]},{13:[1,219]},{17:$Vw,57:[1,220]},o($V61,[2,55]),{28:[1,221]},{25:[1,222]},{10:$V2,11:$V3,20:$V4,21:$V5,56:$Vl,61:223,100:$Vp},{18:[1,224]},o($Vv,[2,6]),o($Vs,[2,22]),{13:[1,225],17:$Vw},{13:[1,226],17:$Vw},{28:[1,227]},{10:[1,228]},{13:[1,229]},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:230,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:231,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($V61,[2,54]),o($Vv,[2,34]),o($Vv,[2,35]),{18:[1,232]},{7:56,8:234,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:[1,233],25:$Vr,26:7,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:175,27:8,28:$V7,29:$Vf1,30:17,31:235,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:181,27:8,28:$V7,29:$Vf1,30:17,31:236,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,20:$V4,21:$V5,27:110,28:$V21,30:109,35:237,36:$Vb,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{37:[1,238],38:[1,239]},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:240,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o($Vs,[2,25]),o($Vs,[2,26]),o([25,60,62],$Vr,{26:7,27:8,39:12,48:13,15:16,30:17,63:28,59:29,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,91:40,98:44,61:45,7:56,8:242,9:$V1,10:$V2,11:$V3,20:$V4,21:$V5,24:[1,241],28:$V7,29:$V8,33:$V9,34:$Va,36:$Vb,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,51:$Vj,52:$Vk,56:$Vl,89:$Vm,94:$Vn,95:$Vo,100:$Vp}),{7:56,8:243,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,25:$Vr,26:7,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{25:[2,65]},{32:[1,244]},{32:[2,29]},{28:[1,245]},{10:[1,246]},{10:[1,247]},o($Vs,[2,24]),{7:56,8:248,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,25:$Vr,26:7,27:8,28:$V7,29:$V8,30:17,33:$V9,34:$Va,36:$Vb,39:12,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{25:$Vj1,42:249,60:$Vk1,62:$Vl1},{25:[1,250]},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:212,27:8,28:$V7,29:$Vf1,30:17,31:251,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{10:$V2,11:$V3,13:$V21,20:$V4,21:$V5,27:110,30:109,35:252,36:$Vb,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{13:[1,253]},{13:[1,254]},{25:[1,255]},{25:[2,63]},o([9,10,11,20,21,24,28,29,33,34,36,40,41,43,44,45,46,47,51,52,56,89,94,95,100],$Vd1,{25:[2,64]}),{32:[2,28]},{13:[1,256]},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:230,27:8,28:$V7,29:$Vf1,30:17,31:257,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:231,27:8,28:$V7,29:$Vf1,30:17,31:258,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},o([9,10,11,20,21,24,25,28,29,33,34,36,40,41,43,44,45,46,47,51,52,56,89,94,95,100],$Vd1,{42:259,60:$Vk1,62:$Vl1}),{7:56,9:$V1,10:$V2,11:$V3,15:16,20:$V4,21:$V5,24:$V6,26:240,27:8,28:$V7,29:$Vf1,30:17,31:260,33:$Vg1,34:$Vh1,36:$Vb,39:180,40:$Vc,41:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,47:$Vi,48:13,51:$Vj,52:$Vk,56:$Vl,59:29,61:45,63:28,64:30,67:31,69:32,71:33,73:34,75:35,77:36,80:37,85:38,88:39,89:$Vm,91:40,94:$Vn,95:$Vo,98:44,100:$Vp},{32:[2,31]},{32:[2,32]},{25:[2,62]},{32:[2,30]}],
defaultActions: {24:[2,46],25:[2,47],26:[2,48],52:[2,1],53:[2,2],196:[2,12],197:[2,10],234:[2,65],236:[2,29],249:[2,63],251:[2,28],257:[2,31],258:[2,32],259:[2,62],260:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//MODELS
	var Function = function(returnType, id, parameters, statements)
	{
		this.model = "Function";
		this.returnType = returnType;
		this.id = id;
		this.parameters = parameters;
		this.statements = statements;
	};

	var Declaration = function(scope, idList)
	{
		this.model = "Declaration";
		this.scope = scope;
		this.idList = idList;
	};

	var If = function(condition, statements)
	{
		this.model = "If";
		this.condition = condition;
		this.statements = statements;
	};

	var IfElse = function(condition, statementsTrue, statementsFalse)
	{
		this.model = "IfElse";
		this.condition = condition;
		this.statementsTrue = statementsTrue;
		this.statementsFalse = statementsFalse;
	};

	var While = function(condition, statements)
	{
		this.model = "While";
		this.condition = condition;
		this.statements = statements;
	};

	var DoWhile = function(condition, statements)
	{
		this.model = "DoWhile";
		this.condition = condition;
		this.statements = statements;
	};

	var For = function(arg1, arg2, arg3, statements)
	{
		this.model = "For";
		this.arg1 = arg1;
		this.arg2 = arg2;
		this.arg3 = arg3;
		this.statements = statements;
	};

	var ForOf = function(id, list, statements)
	{
		this.model = 'ForOf';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};

	var ForIn = function(id, list, statements)
	{
		this.model = 'ForIn';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};
 
	var Case = function(value, statements)
	{
		this.model = "Case";
		this.value = value;
		this.statements = statements;
	};

	var Switch = function(condition, cases)
	{
		this.model = "Switch";
		this.condition = condition;
		this.cases = cases;
	};

	var Return = function(value)
	{
		this.model = "Return";
		this.value = value;
	};

	var Break = function()
	{
		this.model = "Break"
	};

	var Continue = function()
	{
		this.model = "Continue"
	};

	var GraficarTS = function()
	{
		this.model = "GraficarTS";
	};

	var ConsoleLog = function(param)
	{
		this.model = "ConsoleLog";
		this.param = param;
	};

	var PreOperation = function(value, operator)
	{
		this.model = "PreOperation";
		this.operator = operator;
		this.value = value;
	};

	var  UnaryOperation = function(value, operator)
	{
		this.model = "UnaryOperation";
		this.value = value;
		this.operator = operator;
	};

	var ArithmeticOperation = function(value1, value2, operator)
	{
		this.model = "ArithmeticOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var ShiftOperation = function(value1, value2, operator)
	{
		this.model = "ShiftOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var RelationalOperation = function(value1, value2, operator)
	{
		this.model ="RelationalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var LogicalOperation = function(value1, value2, operator)
	{
		this.model ="LogicalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var BitwiseOperation = function(value1, value2, operator)
	{
		this.model ="BitwiseOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var TernaryOperation = function(value1, value2, value3)
	{
		this.model ="TernaryOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.value3 = value3;
	};
	
	var AssignOperation = function(value1, value2, operator)
	{
		this.model ='AssignOperation';
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var Expression = function(exp)
	{
		this.model = 'Expression';
		this.expression = exp;
	}

	var Variable = function(id)
	{
		this.model = 'Variable';
		this.id = id;
	};

	var Number = function(value)
	{
		this.model = 'Number';
		this.value = value;
	};

	var String = function(value)
	{
		this.model = 'String';
		this.value = value;
	};

	var Boolean = function(value)
	{
		this.model = 'Boolean';
		this.value = value;
	};

	var Call = function(id, parameters)
	{
		this.model = 'Call';
		this.id = id;
		this.parameters;
	};

	// FUNCTIONS

	function create_function(returnType, id, params, stms)
	{
		let f = new Function(returnType, id, params, stms);
		return f;
	}
	
	function create_declaration(scp, idList)
	{
		let d = new Declaration(scp, idList);
		return d;
	}

	function create_if(cond, stms)
	{
		let i = new If(cond, stms);
		return i;
	}

	function create_ifelse(cond, stms_true, stms_false)
	{
		let ie = new IfElse(cond, stms_true, stms_false);
		return ie;
	}

	function create_while(cond, stms)
	{
		let w = new While(cond, stms);
		return w;
	}

	function create_dowhile(cond, stms)
	{
		let dw = new DoWhile(cond, stms);
		return dw;
	}

	function create_for(arg1, arg2, arg3, stms)
	{
		let f = new For(arg1, arg2, arg3, stms);
		return f;
	}

	function create_forof(id, list, stms)
	{
		let f = new ForOf(id, list, stms);
		return f;
	}

	function create_forin(id, list, stms)
	{
		let f = new ForIn(id, list, stms);
		return f;
	}

	function create_case(val, stms)
	{
		let c = new Case(val, stms);
		return c;
	}

	function create_switch(cond, css)
	{
		let s = new Switch(cond, css);
		return s;
	}

	function create_return(val)
	{
		let r = new Return(val);
		return r;
	}

	function create_break()
	{
		let b = new Break();
		return b;
	}

	function create_continue()
	{
		let c = new Continue();
		return c;
	}

	function create_graficarTS()
	{
		let g = new GraficarTS();
		return g;
	}

	function create_consolelog(p)
	{
		let c = new ConsoleLog(p);
		return c;
	}

	function create_preoperation(val, op)
	{
		let a = new PreOperation(val, op);
		return a;
	}
	function create_unaryoperation(val, op)
	{
		let u = new UnaryOperation(val, op);
		return u;
	}
	function create_arithmeticoperation(val1, val2, op)
	{
		let a = new ArithmeticOperation(val1, val2, op);
		return a;
	}
	function create_shiftoperation(val1, val2, op)
	{
		let s = new ShiftOperation(val1, val2, op);
		return s;
	}
	function create_relationaloperation(val1, val2, op)
	{
		let r = new RelationalOperation(val1, val2, op);
		return r;
	}
	function create_logicaloperation(val1, val2, op)
	{
		let l = new LogicalOperation(val1, val2, op);
		return l;
	}
	function create_bitwiseoperation(val1, val2, op)
	{
		let b = new BitwiseOperation(val1, val2, op);
		return b;
	}
	function create_ternaryoperation(val1, val2, val3)
	{
		let t = new TernaryOperation(val1, val2, val3);
		return t;
	}
	function create_assignoperation(val1, val2, op)
	{
		let a = new AssignOperation(val1, val2, op);
		return a;
	}

	function create_expression_element(exp)
	{
		let e = new Expression(exp);
		return e;
	}

	function create_number(value)
	{
		let n = new Number(value);
		return n;
	}

	function create_string(value)
	{
		let s = new String(value);
		return s;
	}

	function create_variable(id)
	{
		let v = new Variable(id);
		return v;
	}

	function create_call(id, params)
	{
		let c = new Call(id, params);
		return c;
	}

	function create_boolean(val)
	{
		let b = new Boolean(val);
		return b;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 28;
break;
case 1:return 17;
break;
case 2:return 18;
break;
case 3:return 99;
break;
case 4:return 11;
break;
case 5:return 13;
break;
case 6:return 56;
break;
case 7:return 57;
break;
case 8:return 24;
break;
case 9:return 25;
break;
case 10:return 96;
break;
case 11:return 97;
break;
case 12:return 87;
break;
case 13:return 89;
break;
case 14:return 90;
break;
case 15:return 92;
break;
case 16:return 93;
break;
case 17:return 86;
break;
case 18:return 84;
break;
case 19:return 82;
break;
case 20:return 83;
break;
case 21:return 79;
break;
case 22:return 81;
break;
case 23:return 78;
break;
case 24:return 68;
break;
case 25:return 66;
break;
case 26:return 94;
break;
case 27:return 74;
break;
case 28:return 70;
break;
case 29:return 95;
break;
case 30:return 72;
break;
case 31:return 29;
break;
case 32:return 32;
break;
case 33:return 41;
break;
case 34:return 60;
break;
case 35:return 62;
break;
case 36:return 43;
break;
case 37:return 44;
break;
case 38:return 'RETURN';
break;
case 39:return 33;
break;
case 40:return 40;
break;
case 41:return 34;
break;
case 42:return 38;
break;
case 43:return 37;
break;
case 44:return 46;
break;
case 45:return 47;
break;
case 46:return 65;
break;
case 47:return 76;
break;
case 48:return 58;
break;
case 49:return 20;
break;
case 50:return 21;
break;
case 51:return 22;
break;
case 52:return 23;
break;
case 53:return 'TYPES';
break;
case 54:return 'PUSH';
break;
case 55:return 'POP';
break;
case 56:return 'LENGTH';
break;
case 57:return 51;
break;
case 58:return 52;
break;
case 59:return 36;
break;
case 60:return 9;
break;
case 61:
break;
case 62:
break;
case 63:return 100;
break;
case 64:return 'INTEGER';
break;
case 65:return 21;
break;
case 66:return	'NAME';
break;
case 67:return 5;
break;
case 68: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\^)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:types\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:function\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:((").*?("))|((').*?(')))/i,/^(?:[a-zA-Z_][a-aA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calc;
exports.Parser = calc.Parser;
exports.parse = function () { return calc.parse.apply(calc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}